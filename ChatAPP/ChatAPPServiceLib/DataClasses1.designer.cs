#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.34209
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatAPPServiceLib
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ChatAPP")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertAllMessages(AllMessages instance);
    partial void UpdateAllMessages(AllMessages instance);
    partial void DeleteAllMessages(AllMessages instance);
    partial void InsertPrivateMessages(PrivateMessages instance);
    partial void UpdatePrivateMessages(PrivateMessages instance);
    partial void DeletePrivateMessages(PrivateMessages instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::ChatAPPServiceLib.Properties.Settings.Default.ChatAPPConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AllMessages> AllMessages
		{
			get
			{
				return this.GetTable<AllMessages>();
			}
		}
		
		public System.Data.Linq.Table<PrivateMessages> PrivateMessages
		{
			get
			{
				return this.GetTable<PrivateMessages>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AllMessages")]
	public partial class AllMessages : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _UserName;
		
		private string _Message;
		
		private EntityRef<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    #endregion
		
		public AllMessages()
		{
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(2048)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_AllMessages", Storage="_Users", ThisKey="UserName", OtherKey="UserName", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.AllMessages.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.AllMessages.Add(this);
						this._UserName = value.UserName;
					}
					else
					{
						this._UserName = default(string);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrivateMessages")]
	public partial class PrivateMessages : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _UserNameFrom;
		
		private string _UserNameTo;
		
		private string _Message;
		
		private System.Nullable<bool> _IsSend;
		
		private EntityRef<Users> _Users;
		
		private EntityRef<Users> _Users1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnUserNameFromChanging(string value);
    partial void OnUserNameFromChanged();
    partial void OnUserNameToChanging(string value);
    partial void OnUserNameToChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnIsSendChanging(System.Nullable<bool> value);
    partial void OnIsSendChanged();
    #endregion
		
		public PrivateMessages()
		{
			this._Users = default(EntityRef<Users>);
			this._Users1 = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserNameFrom", DbType="NVarChar(256)")]
		public string UserNameFrom
		{
			get
			{
				return this._UserNameFrom;
			}
			set
			{
				if ((this._UserNameFrom != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameFromChanging(value);
					this.SendPropertyChanging();
					this._UserNameFrom = value;
					this.SendPropertyChanged("UserNameFrom");
					this.OnUserNameFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserNameTo", DbType="NVarChar(256)")]
		public string UserNameTo
		{
			get
			{
				return this._UserNameTo;
			}
			set
			{
				if ((this._UserNameTo != value))
				{
					if (this._Users1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameToChanging(value);
					this.SendPropertyChanging();
					this._UserNameTo = value;
					this.SendPropertyChanged("UserNameTo");
					this.OnUserNameToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(2048)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSend", DbType="Bit")]
		public System.Nullable<bool> IsSend
		{
			get
			{
				return this._IsSend;
			}
			set
			{
				if ((this._IsSend != value))
				{
					this.OnIsSendChanging(value);
					this.SendPropertyChanging();
					this._IsSend = value;
					this.SendPropertyChanged("IsSend");
					this.OnIsSendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_PrivateMessages", Storage="_Users", ThisKey="UserNameFrom", OtherKey="UserName", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.PrivateMessages.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.PrivateMessages.Add(this);
						this._UserNameFrom = value.UserName;
					}
					else
					{
						this._UserNameFrom = default(string);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_PrivateMessages1", Storage="_Users1", ThisKey="UserNameTo", OtherKey="UserName", IsForeignKey=true)]
		public Users Users1
		{
			get
			{
				return this._Users1.Entity;
			}
			set
			{
				Users previousValue = this._Users1.Entity;
				if (((previousValue != value) 
							|| (this._Users1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users1.Entity = null;
						previousValue.PrivateMessages1.Remove(this);
					}
					this._Users1.Entity = value;
					if ((value != null))
					{
						value.PrivateMessages1.Add(this);
						this._UserNameTo = value.UserName;
					}
					else
					{
						this._UserNameTo = default(string);
					}
					this.SendPropertyChanged("Users1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _UserName;
		
		private string _UserPasswordHash;
		
		private string _Token;
		
		private System.Nullable<System.DateTime> _ExpirienceDate;
		
		private EntitySet<AllMessages> _AllMessages;
		
		private EntitySet<PrivateMessages> _PrivateMessages;
		
		private EntitySet<PrivateMessages> _PrivateMessages1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserPasswordHashChanging(string value);
    partial void OnUserPasswordHashChanged();
    partial void OnTokenChanging(string value);
    partial void OnTokenChanged();
    partial void OnExpirienceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpirienceDateChanged();
    #endregion
		
		public Users()
		{
			this._AllMessages = new EntitySet<AllMessages>(new Action<AllMessages>(this.attach_AllMessages), new Action<AllMessages>(this.detach_AllMessages));
			this._PrivateMessages = new EntitySet<PrivateMessages>(new Action<PrivateMessages>(this.attach_PrivateMessages), new Action<PrivateMessages>(this.detach_PrivateMessages));
			this._PrivateMessages1 = new EntitySet<PrivateMessages>(new Action<PrivateMessages>(this.attach_PrivateMessages1), new Action<PrivateMessages>(this.detach_PrivateMessages1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(256)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(256)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPasswordHash", DbType="NVarChar(256)")]
		public string UserPasswordHash
		{
			get
			{
				return this._UserPasswordHash;
			}
			set
			{
				if ((this._UserPasswordHash != value))
				{
					this.OnUserPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._UserPasswordHash = value;
					this.SendPropertyChanged("UserPasswordHash");
					this.OnUserPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Token", DbType="NVarChar(256)")]
		public string Token
		{
			get
			{
				return this._Token;
			}
			set
			{
				if ((this._Token != value))
				{
					this.OnTokenChanging(value);
					this.SendPropertyChanging();
					this._Token = value;
					this.SendPropertyChanged("Token");
					this.OnTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirienceDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpirienceDate
		{
			get
			{
				return this._ExpirienceDate;
			}
			set
			{
				if ((this._ExpirienceDate != value))
				{
					this.OnExpirienceDateChanging(value);
					this.SendPropertyChanging();
					this._ExpirienceDate = value;
					this.SendPropertyChanged("ExpirienceDate");
					this.OnExpirienceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_AllMessages", Storage="_AllMessages", ThisKey="UserName", OtherKey="UserName")]
		public EntitySet<AllMessages> AllMessages
		{
			get
			{
				return this._AllMessages;
			}
			set
			{
				this._AllMessages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_PrivateMessages", Storage="_PrivateMessages", ThisKey="UserName", OtherKey="UserNameFrom")]
		public EntitySet<PrivateMessages> PrivateMessages
		{
			get
			{
				return this._PrivateMessages;
			}
			set
			{
				this._PrivateMessages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_PrivateMessages1", Storage="_PrivateMessages1", ThisKey="UserName", OtherKey="UserNameTo")]
		public EntitySet<PrivateMessages> PrivateMessages1
		{
			get
			{
				return this._PrivateMessages1;
			}
			set
			{
				this._PrivateMessages1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AllMessages(AllMessages entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_AllMessages(AllMessages entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_PrivateMessages(PrivateMessages entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_PrivateMessages(PrivateMessages entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_PrivateMessages1(PrivateMessages entity)
		{
			this.SendPropertyChanging();
			entity.Users1 = this;
		}
		
		private void detach_PrivateMessages1(PrivateMessages entity)
		{
			this.SendPropertyChanging();
			entity.Users1 = null;
		}
	}
}
#pragma warning restore 1591
