//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFDataContractClient.ServiceAsyncNS {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DiskInfoResult", Namespace="http://schemas.datacontract.org/2004/07/WCFDataContractService")]
    [System.SerializableAttribute()]
    public partial class DiskInfoResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string freeSpaceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string totalSpaceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string freeSpace {
            get {
                return this.freeSpaceField;
            }
            set {
                if ((object.ReferenceEquals(this.freeSpaceField, value) != true)) {
                    this.freeSpaceField = value;
                    this.RaisePropertyChanged("freeSpace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string totalSpace {
            get {
                return this.totalSpaceField;
            }
            set {
                if ((object.ReferenceEquals(this.totalSpaceField, value) != true)) {
                    this.totalSpaceField = value;
                    this.RaisePropertyChanged("totalSpace");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceAsyncNS.IMyDiskInfo")]
    public interface IMyDiskInfo {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyDiskInfo/DiskTotal1", ReplyAction="http://tempuri.org/IMyDiskInfo/DiskTotal1Response")]
        WCFDataContractClient.ServiceAsyncNS.DiskInfoResult DiskTotal1(string disk);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMyDiskInfo/DiskTotal1", ReplyAction="http://tempuri.org/IMyDiskInfo/DiskTotal1Response")]
        System.IAsyncResult BeginDiskTotal1(string disk, System.AsyncCallback callback, object asyncState);
        
        WCFDataContractClient.ServiceAsyncNS.DiskInfoResult EndDiskTotal1(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyDiskInfo/DiskTotal2", ReplyAction="http://tempuri.org/IMyDiskInfo/DiskTotal2Response")]
        WCFDataContractClient.ServiceAsyncNS.DiskInfoResult DiskTotal2(string disk, string disk1);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMyDiskInfo/DiskTotal2", ReplyAction="http://tempuri.org/IMyDiskInfo/DiskTotal2Response")]
        System.IAsyncResult BeginDiskTotal2(string disk, string disk1, System.AsyncCallback callback, object asyncState);
        
        WCFDataContractClient.ServiceAsyncNS.DiskInfoResult EndDiskTotal2(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyDiskInfoChannel : WCFDataContractClient.ServiceAsyncNS.IMyDiskInfo, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DiskTotal1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DiskTotal1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WCFDataContractClient.ServiceAsyncNS.DiskInfoResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WCFDataContractClient.ServiceAsyncNS.DiskInfoResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DiskTotal2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DiskTotal2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WCFDataContractClient.ServiceAsyncNS.DiskInfoResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WCFDataContractClient.ServiceAsyncNS.DiskInfoResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyDiskInfoClient : System.ServiceModel.ClientBase<WCFDataContractClient.ServiceAsyncNS.IMyDiskInfo>, WCFDataContractClient.ServiceAsyncNS.IMyDiskInfo {
        
        private BeginOperationDelegate onBeginDiskTotal1Delegate;
        
        private EndOperationDelegate onEndDiskTotal1Delegate;
        
        private System.Threading.SendOrPostCallback onDiskTotal1CompletedDelegate;
        
        private BeginOperationDelegate onBeginDiskTotal2Delegate;
        
        private EndOperationDelegate onEndDiskTotal2Delegate;
        
        private System.Threading.SendOrPostCallback onDiskTotal2CompletedDelegate;
        
        public MyDiskInfoClient() {
        }
        
        public MyDiskInfoClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MyDiskInfoClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyDiskInfoClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyDiskInfoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<DiskTotal1CompletedEventArgs> DiskTotal1Completed;
        
        public event System.EventHandler<DiskTotal2CompletedEventArgs> DiskTotal2Completed;
        
        public WCFDataContractClient.ServiceAsyncNS.DiskInfoResult DiskTotal1(string disk) {
            return base.Channel.DiskTotal1(disk);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDiskTotal1(string disk, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDiskTotal1(disk, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public WCFDataContractClient.ServiceAsyncNS.DiskInfoResult EndDiskTotal1(System.IAsyncResult result) {
            return base.Channel.EndDiskTotal1(result);
        }
        
        private System.IAsyncResult OnBeginDiskTotal1(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string disk = ((string)(inValues[0]));
            return this.BeginDiskTotal1(disk, callback, asyncState);
        }
        
        private object[] OnEndDiskTotal1(System.IAsyncResult result) {
            WCFDataContractClient.ServiceAsyncNS.DiskInfoResult retVal = this.EndDiskTotal1(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDiskTotal1Completed(object state) {
            if ((this.DiskTotal1Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DiskTotal1Completed(this, new DiskTotal1CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DiskTotal1Async(string disk) {
            this.DiskTotal1Async(disk, null);
        }
        
        public void DiskTotal1Async(string disk, object userState) {
            if ((this.onBeginDiskTotal1Delegate == null)) {
                this.onBeginDiskTotal1Delegate = new BeginOperationDelegate(this.OnBeginDiskTotal1);
            }
            if ((this.onEndDiskTotal1Delegate == null)) {
                this.onEndDiskTotal1Delegate = new EndOperationDelegate(this.OnEndDiskTotal1);
            }
            if ((this.onDiskTotal1CompletedDelegate == null)) {
                this.onDiskTotal1CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDiskTotal1Completed);
            }
            base.InvokeAsync(this.onBeginDiskTotal1Delegate, new object[] {
                        disk}, this.onEndDiskTotal1Delegate, this.onDiskTotal1CompletedDelegate, userState);
        }
        
        public WCFDataContractClient.ServiceAsyncNS.DiskInfoResult DiskTotal2(string disk, string disk1) {
            return base.Channel.DiskTotal2(disk, disk1);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDiskTotal2(string disk, string disk1, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDiskTotal2(disk, disk1, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public WCFDataContractClient.ServiceAsyncNS.DiskInfoResult EndDiskTotal2(System.IAsyncResult result) {
            return base.Channel.EndDiskTotal2(result);
        }
        
        private System.IAsyncResult OnBeginDiskTotal2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string disk = ((string)(inValues[0]));
            string disk1 = ((string)(inValues[1]));
            return this.BeginDiskTotal2(disk, disk1, callback, asyncState);
        }
        
        private object[] OnEndDiskTotal2(System.IAsyncResult result) {
            WCFDataContractClient.ServiceAsyncNS.DiskInfoResult retVal = this.EndDiskTotal2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDiskTotal2Completed(object state) {
            if ((this.DiskTotal2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DiskTotal2Completed(this, new DiskTotal2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DiskTotal2Async(string disk, string disk1) {
            this.DiskTotal2Async(disk, disk1, null);
        }
        
        public void DiskTotal2Async(string disk, string disk1, object userState) {
            if ((this.onBeginDiskTotal2Delegate == null)) {
                this.onBeginDiskTotal2Delegate = new BeginOperationDelegate(this.OnBeginDiskTotal2);
            }
            if ((this.onEndDiskTotal2Delegate == null)) {
                this.onEndDiskTotal2Delegate = new EndOperationDelegate(this.OnEndDiskTotal2);
            }
            if ((this.onDiskTotal2CompletedDelegate == null)) {
                this.onDiskTotal2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDiskTotal2Completed);
            }
            base.InvokeAsync(this.onBeginDiskTotal2Delegate, new object[] {
                        disk,
                        disk1}, this.onEndDiskTotal2Delegate, this.onDiskTotal2CompletedDelegate, userState);
        }
    }
}
